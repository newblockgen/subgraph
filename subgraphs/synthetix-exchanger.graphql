# RatesUpdated tracks this event from the ExchangeRates.sol contract
type ExchangeEntrySettled @entity {
     " transaction hash and log index "
      id: ID!

      " synth exchanged from "
      from: Bytes!

      " synth exchanged to "
      src: Bytes!

      " number of units of synth from exchanged "
      amount: BigDecimal!

      " address which receives the settlement "
      dest: Bytes!

      " amount reclaimed of dest due to underpayment "
      reclaim: BigDecimal!

      " amount returned of dest due to overpayment "
      rebate: BigDecimal!

      " aggregator price round for src synth "
      srcRoundIdAtPeriodEnd: BigInt!

      " aggregator price round for dest synth "
      destRoundIdAtPeriodEnd: BigInt!

      " time when the original exchange occured "
      exchangeTimestamp: BigInt!
}


type Transaction @entity{
    id:ID!
    transactionHash:Bytes!
    account:Bytes! #Address
    fromCurrencyKey:String
    fromAmount:BigInt!
    toCurrencyKey:String
    toAmount:BigInt!
    fee:BigInt!
    timstamp:BigInt!
    block:BigInt!
    trackingCode:String!
    symbol:String!
}

type Account @entity{
    id:ID!
    account: Bytes! #Address
    reges:RegisterMember!
}

type RegisterMember @entity{
    id:ID!
    count:BigInt!
    accountList: [Account!]!
    timstamp:BigInt!
}

type Portfolio @entity{
    id:ID!
    account:Bytes!
    timstamp:BigInt!
    amount:BigDecimal!
    zasset:[ZAssetBalance!]!
}

type ZAssetBalance @entity{
    id:ID!
    account:Bytes!
    currencyKey: String!
    balance: BigInt!
    usdConvertBalance: BigDecimal!
    rate:BigInt!
    timstamp:BigInt!
    portfolios: Portfolio!

}

type OneHourPortFolio @entity{
    id:ID!
    account:Bytes!
    timstamp:BigInt!
    amount:BigDecimal!
    startAmount:BigDecimal!
}

type OneDayPortFolio @entity{
    id:ID!
    account:Bytes!
    timstamp:BigInt!
    amount:BigDecimal!
    startAmount:BigDecimal!
}

type WeekPortFolio @entity{
    id:ID!
    account:Bytes!
    timstamp:BigInt!
    amount:BigDecimal!
    startAmount:BigDecimal!
}

type MonthPortFolio @entity{
    id:ID!
    account:Bytes!
    timstamp:BigInt!
    amount:BigDecimal!
    startAmount:BigDecimal!
}

type YearPortFolio @entity{
    id:ID!
    account:Bytes!
    timstamp:BigInt!
    amount:BigDecimal!
    startAmount:BigDecimal!
}

type CoinIncrease @entity {
    id:ID!
    "币种"
    synth:String!
    timestamp:BigInt!
    "24H 交易量"
    volume:BigInt!
    "24H 消耗手续费"
    fee:BigDecimal!
}

# 币种交易量
type ZssetTradingVolOneDay @entity{
    id:ID!
    "币种"
    currencyKey: String!
    "当前时段起始交易量"
    startAmount:BigInt!
    "当前时段结束时交易量"
    finalAmount: BigInt!
    "交易次数"
    tradingTimes:BigInt!
    "累计手续费"
    fee:BigInt!
    timstamp:BigInt!
}

type ZssetTradingVolFiveMinute @entity{
    id:ID!
    "币种"
    currencyKey: String!
    "当前时段起始交易量"
    startAmount:BigInt!
    "当前时段结束时交易量"
    finalAmount: BigInt!
    "交易次数"
    tradingTimes:BigInt!
    "累计手续费"
    fee:BigInt!
    timstamp:BigInt!
}

type ZssetTradingVolFifteenMinute @entity{
    id:ID!
    "币种"
    currencyKey: String!
    "当前时段起始交易量"
    startAmount:BigInt!
    "当前时段结束时交易量"
    finalAmount: BigInt!
    "交易次数"
    tradingTimes:BigInt!
    "累计手续费"
    fee:BigInt!
    timstamp:BigInt!
}

type ZssetTradingVolOneHour @entity{
    id:ID!
    "币种"
    currencyKey: String!
    "当前时段起始交易量"
    startAmount:BigInt!
    "当前时段结束时交易量"
    finalAmount: BigInt!
    "交易次数"
    tradingTimes:BigInt!
    "累计手续费"
    fee:BigInt!
    timstamp:BigInt!
}

type ZssetTradingVolFourHour @entity{
    id:ID!
    "币种"
    currencyKey: String!
    "当前时段起始交易量"
    startAmount:BigInt!
    "当前时段结束时交易量"
    finalAmount: BigInt!
    "交易次数"
    tradingTimes:BigInt!
    "累计手续费"
    fee:BigInt!
    timstamp:BigInt!
}

type ZssetTradingVolWeekly @entity{
    id:ID!
    "币种"
    currencyKey: String!
    "当前时段起始交易量"
    startAmount:BigInt!
    "当前时段结束时交易量"
    finalAmount: BigInt!
    "交易次数"
    tradingTimes:BigInt!
    "累计手续费"
    fee:BigInt!
    timstamp:BigInt!
}

