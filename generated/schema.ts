// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RatesUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RatesUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RatesUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RatesUpdated", id.toString(), this);
  }

  static load(id: string): RatesUpdated | null {
    return store.get("RatesUpdated", id) as RatesUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get currencyKeys(): Array<Bytes> {
    let value = this.get("currencyKeys");
    return value.toBytesArray();
  }

  set currencyKeys(value: Array<Bytes>) {
    this.set("currencyKeys", Value.fromBytesArray(value));
  }

  get newRates(): Array<BigInt> {
    let value = this.get("newRates");
    return value.toBigIntArray();
  }

  set newRates(value: Array<BigInt>) {
    this.set("newRates", Value.fromBigIntArray(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RateUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RateUpdate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RateUpdate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RateUpdate", id.toString(), this);
  }

  static load(id: string): RateUpdate | null {
    return store.get("RateUpdate", id) as RateUpdate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currencyKey(): Bytes {
    let value = this.get("currencyKey");
    return value.toBytes();
  }

  set currencyKey(value: Bytes) {
    this.set("currencyKey", Value.fromBytes(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class AggregatorAnswer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AggregatorAnswer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AggregatorAnswer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AggregatorAnswer", id.toString(), this);
  }

  static load(id: string): AggregatorAnswer | null {
    return store.get("AggregatorAnswer", id) as AggregatorAnswer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currencyKey(): Bytes {
    let value = this.get("currencyKey");
    return value.toBytes();
  }

  set currencyKey(value: Bytes) {
    this.set("currencyKey", Value.fromBytes(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get aggregator(): Bytes {
    let value = this.get("aggregator");
    return value.toBytes();
  }

  set aggregator(value: Bytes) {
    this.set("aggregator", Value.fromBytes(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }

  get roundId(): BigInt {
    let value = this.get("roundId");
    return value.toBigInt();
  }

  set roundId(value: BigInt) {
    this.set("roundId", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FifteenMinuteHZNPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save FifteenMinuteHZNPrice entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FifteenMinuteHZNPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FifteenMinuteHZNPrice", id.toString(), this);
  }

  static load(id: string): FifteenMinuteHZNPrice | null {
    return store.get(
      "FifteenMinuteHZNPrice",
      id
    ) as FifteenMinuteHZNPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    return value.toBigInt();
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }
}

export class DailyHZNPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DailyHZNPrice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DailyHZNPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DailyHZNPrice", id.toString(), this);
  }

  static load(id: string): DailyHZNPrice | null {
    return store.get("DailyHZNPrice", id) as DailyHZNPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    return value.toBigInt();
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }
}

export class LatestRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LatestRate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LatestRate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LatestRate", id.toString(), this);
  }

  static load(id: string): LatestRate | null {
    return store.get("LatestRate", id) as LatestRate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }
}

export class DailyCandle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DailyCandle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DailyCandle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DailyCandle", id.toString(), this);
  }

  static load(id: string): DailyCandle | null {
    return store.get("DailyCandle", id) as DailyCandle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    return value.toBigInt();
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    return value.toBigInt();
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
