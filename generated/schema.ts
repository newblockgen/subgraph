// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DailyCandle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("synth", Value.fromString(""));
    this.set("open", Value.fromBigInt(BigInt.zero()));
    this.set("high", Value.fromBigInt(BigInt.zero()));
    this.set("low", Value.fromBigInt(BigInt.zero()));
    this.set("close", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyCandle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyCandle entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyCandle", id.toString(), this);
    }
  }

  static load(id: string): DailyCandle | null {
    return changetype<DailyCandle | null>(store.get("DailyCandle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value!.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    return value!.toBigInt();
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value!.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value!.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    return value!.toBigInt();
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FiveMinutePrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("synth", Value.fromString(""));
    this.set("open", Value.fromBigInt(BigInt.zero()));
    this.set("high", Value.fromBigInt(BigInt.zero()));
    this.set("low", Value.fromBigInt(BigInt.zero()));
    this.set("close", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FiveMinutePrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FiveMinutePrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FiveMinutePrice", id.toString(), this);
    }
  }

  static load(id: string): FiveMinutePrice | null {
    return changetype<FiveMinutePrice | null>(store.get("FiveMinutePrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value!.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    return value!.toBigInt();
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value!.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value!.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    return value!.toBigInt();
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FifteenMinutePrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("synth", Value.fromString(""));
    this.set("open", Value.fromBigInt(BigInt.zero()));
    this.set("high", Value.fromBigInt(BigInt.zero()));
    this.set("low", Value.fromBigInt(BigInt.zero()));
    this.set("close", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FifteenMinutePrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FifteenMinutePrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FifteenMinutePrice", id.toString(), this);
    }
  }

  static load(id: string): FifteenMinutePrice | null {
    return changetype<FifteenMinutePrice | null>(
      store.get("FifteenMinutePrice", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value!.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    return value!.toBigInt();
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value!.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value!.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    return value!.toBigInt();
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class OneHourPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("synth", Value.fromString(""));
    this.set("open", Value.fromBigInt(BigInt.zero()));
    this.set("high", Value.fromBigInt(BigInt.zero()));
    this.set("low", Value.fromBigInt(BigInt.zero()));
    this.set("close", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OneHourPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OneHourPrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OneHourPrice", id.toString(), this);
    }
  }

  static load(id: string): OneHourPrice | null {
    return changetype<OneHourPrice | null>(store.get("OneHourPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value!.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    return value!.toBigInt();
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value!.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value!.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    return value!.toBigInt();
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FourHoursPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("synth", Value.fromString(""));
    this.set("open", Value.fromBigInt(BigInt.zero()));
    this.set("high", Value.fromBigInt(BigInt.zero()));
    this.set("low", Value.fromBigInt(BigInt.zero()));
    this.set("close", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FourHoursPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FourHoursPrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FourHoursPrice", id.toString(), this);
    }
  }

  static load(id: string): FourHoursPrice | null {
    return changetype<FourHoursPrice | null>(store.get("FourHoursPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value!.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    return value!.toBigInt();
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value!.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value!.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    return value!.toBigInt();
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class WeekPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("synth", Value.fromString(""));
    this.set("open", Value.fromBigInt(BigInt.zero()));
    this.set("high", Value.fromBigInt(BigInt.zero()));
    this.set("low", Value.fromBigInt(BigInt.zero()));
    this.set("close", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WeekPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WeekPrice entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WeekPrice", id.toString(), this);
    }
  }

  static load(id: string): WeekPrice | null {
    return changetype<WeekPrice | null>(store.get("WeekPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value!.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    return value!.toBigInt();
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value!.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value!.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    return value!.toBigInt();
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Price extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("price", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Price entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Price entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Price", id.toString(), this);
    }
  }

  static load(id: string): Price | null {
    return changetype<Price | null>(store.get("Price", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }
}

export class CoinIncrease extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("synth", Value.fromString(""));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("bPrice", Value.fromBigInt(BigInt.zero()));
    this.set("increase", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("high", Value.fromBigInt(BigInt.zero()));
    this.set("low", Value.fromBigInt(BigInt.zero()));
    this.set("marketVal", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CoinIncrease entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CoinIncrease entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CoinIncrease", id.toString(), this);
    }
  }

  static load(id: string): CoinIncrease | null {
    return changetype<CoinIncrease | null>(store.get("CoinIncrease", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get synth(): string {
    let value = this.get("synth");
    return value!.toString();
  }

  set synth(value: string) {
    this.set("synth", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get bPrice(): BigInt {
    let value = this.get("bPrice");
    return value!.toBigInt();
  }

  set bPrice(value: BigInt) {
    this.set("bPrice", Value.fromBigInt(value));
  }

  get increase(): BigDecimal {
    let value = this.get("increase");
    return value!.toBigDecimal();
  }

  set increase(value: BigDecimal) {
    this.set("increase", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value!.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value!.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get marketVal(): BigDecimal {
    let value = this.get("marketVal");
    return value!.toBigDecimal();
  }

  set marketVal(value: BigDecimal) {
    this.set("marketVal", Value.fromBigDecimal(value));
  }
}
