"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoinIncrease = exports.Price = exports.WeekPrice = exports.FourHoursPrice = exports.OneHourPrice = exports.FifteenMinutePrice = exports.FiveMinutePrice = exports.DailyCandle = void 0;
var graph_ts_1 = require("@graphprotocol/graph-ts");
var DailyCandle = /** @class */ (function (_super) {
    __extends(DailyCandle, _super);
    function DailyCandle(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("synth", graph_ts_1.Value.fromString(""));
        _this.set("open", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("high", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("low", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("close", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    DailyCandle.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save DailyCandle entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save DailyCandle entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("DailyCandle", id.toString(), this);
        }
    };
    DailyCandle.load = function (id) {
        return changetype(graph_ts_1.store.get("DailyCandle", id));
    };
    Object.defineProperty(DailyCandle.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DailyCandle.prototype, "synth", {
        get: function () {
            var value = this.get("synth");
            return value.toString();
        },
        set: function (value) {
            this.set("synth", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DailyCandle.prototype, "open", {
        get: function () {
            var value = this.get("open");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("open", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DailyCandle.prototype, "high", {
        get: function () {
            var value = this.get("high");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("high", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DailyCandle.prototype, "low", {
        get: function () {
            var value = this.get("low");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("low", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DailyCandle.prototype, "close", {
        get: function () {
            var value = this.get("close");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("close", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DailyCandle.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return DailyCandle;
}(graph_ts_1.Entity));
exports.DailyCandle = DailyCandle;
var FiveMinutePrice = /** @class */ (function (_super) {
    __extends(FiveMinutePrice, _super);
    function FiveMinutePrice(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("synth", graph_ts_1.Value.fromString(""));
        _this.set("open", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("high", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("low", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("close", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    FiveMinutePrice.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save FiveMinutePrice entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save FiveMinutePrice entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("FiveMinutePrice", id.toString(), this);
        }
    };
    FiveMinutePrice.load = function (id) {
        return changetype(graph_ts_1.store.get("FiveMinutePrice", id));
    };
    Object.defineProperty(FiveMinutePrice.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiveMinutePrice.prototype, "synth", {
        get: function () {
            var value = this.get("synth");
            return value.toString();
        },
        set: function (value) {
            this.set("synth", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiveMinutePrice.prototype, "open", {
        get: function () {
            var value = this.get("open");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("open", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiveMinutePrice.prototype, "high", {
        get: function () {
            var value = this.get("high");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("high", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiveMinutePrice.prototype, "low", {
        get: function () {
            var value = this.get("low");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("low", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiveMinutePrice.prototype, "close", {
        get: function () {
            var value = this.get("close");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("close", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FiveMinutePrice.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return FiveMinutePrice;
}(graph_ts_1.Entity));
exports.FiveMinutePrice = FiveMinutePrice;
var FifteenMinutePrice = /** @class */ (function (_super) {
    __extends(FifteenMinutePrice, _super);
    function FifteenMinutePrice(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("synth", graph_ts_1.Value.fromString(""));
        _this.set("open", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("high", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("low", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("close", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    FifteenMinutePrice.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save FifteenMinutePrice entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save FifteenMinutePrice entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("FifteenMinutePrice", id.toString(), this);
        }
    };
    FifteenMinutePrice.load = function (id) {
        return changetype(graph_ts_1.store.get("FifteenMinutePrice", id));
    };
    Object.defineProperty(FifteenMinutePrice.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FifteenMinutePrice.prototype, "synth", {
        get: function () {
            var value = this.get("synth");
            return value.toString();
        },
        set: function (value) {
            this.set("synth", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FifteenMinutePrice.prototype, "open", {
        get: function () {
            var value = this.get("open");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("open", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FifteenMinutePrice.prototype, "high", {
        get: function () {
            var value = this.get("high");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("high", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FifteenMinutePrice.prototype, "low", {
        get: function () {
            var value = this.get("low");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("low", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FifteenMinutePrice.prototype, "close", {
        get: function () {
            var value = this.get("close");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("close", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FifteenMinutePrice.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return FifteenMinutePrice;
}(graph_ts_1.Entity));
exports.FifteenMinutePrice = FifteenMinutePrice;
var OneHourPrice = /** @class */ (function (_super) {
    __extends(OneHourPrice, _super);
    function OneHourPrice(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("synth", graph_ts_1.Value.fromString(""));
        _this.set("open", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("high", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("low", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("close", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    OneHourPrice.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save OneHourPrice entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save OneHourPrice entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("OneHourPrice", id.toString(), this);
        }
    };
    OneHourPrice.load = function (id) {
        return changetype(graph_ts_1.store.get("OneHourPrice", id));
    };
    Object.defineProperty(OneHourPrice.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OneHourPrice.prototype, "synth", {
        get: function () {
            var value = this.get("synth");
            return value.toString();
        },
        set: function (value) {
            this.set("synth", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OneHourPrice.prototype, "open", {
        get: function () {
            var value = this.get("open");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("open", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OneHourPrice.prototype, "high", {
        get: function () {
            var value = this.get("high");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("high", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OneHourPrice.prototype, "low", {
        get: function () {
            var value = this.get("low");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("low", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OneHourPrice.prototype, "close", {
        get: function () {
            var value = this.get("close");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("close", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(OneHourPrice.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return OneHourPrice;
}(graph_ts_1.Entity));
exports.OneHourPrice = OneHourPrice;
var FourHoursPrice = /** @class */ (function (_super) {
    __extends(FourHoursPrice, _super);
    function FourHoursPrice(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("synth", graph_ts_1.Value.fromString(""));
        _this.set("open", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("high", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("low", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("close", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    FourHoursPrice.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save FourHoursPrice entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save FourHoursPrice entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("FourHoursPrice", id.toString(), this);
        }
    };
    FourHoursPrice.load = function (id) {
        return changetype(graph_ts_1.store.get("FourHoursPrice", id));
    };
    Object.defineProperty(FourHoursPrice.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FourHoursPrice.prototype, "synth", {
        get: function () {
            var value = this.get("synth");
            return value.toString();
        },
        set: function (value) {
            this.set("synth", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FourHoursPrice.prototype, "open", {
        get: function () {
            var value = this.get("open");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("open", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FourHoursPrice.prototype, "high", {
        get: function () {
            var value = this.get("high");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("high", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FourHoursPrice.prototype, "low", {
        get: function () {
            var value = this.get("low");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("low", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FourHoursPrice.prototype, "close", {
        get: function () {
            var value = this.get("close");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("close", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FourHoursPrice.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return FourHoursPrice;
}(graph_ts_1.Entity));
exports.FourHoursPrice = FourHoursPrice;
var WeekPrice = /** @class */ (function (_super) {
    __extends(WeekPrice, _super);
    function WeekPrice(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("synth", graph_ts_1.Value.fromString(""));
        _this.set("open", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("high", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("low", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("close", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    WeekPrice.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save WeekPrice entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save WeekPrice entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("WeekPrice", id.toString(), this);
        }
    };
    WeekPrice.load = function (id) {
        return changetype(graph_ts_1.store.get("WeekPrice", id));
    };
    Object.defineProperty(WeekPrice.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WeekPrice.prototype, "synth", {
        get: function () {
            var value = this.get("synth");
            return value.toString();
        },
        set: function (value) {
            this.set("synth", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WeekPrice.prototype, "open", {
        get: function () {
            var value = this.get("open");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("open", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WeekPrice.prototype, "high", {
        get: function () {
            var value = this.get("high");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("high", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WeekPrice.prototype, "low", {
        get: function () {
            var value = this.get("low");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("low", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WeekPrice.prototype, "close", {
        get: function () {
            var value = this.get("close");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("close", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WeekPrice.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    return WeekPrice;
}(graph_ts_1.Entity));
exports.WeekPrice = WeekPrice;
var Price = /** @class */ (function (_super) {
    __extends(Price, _super);
    function Price(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("blockNumber", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("price", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        return _this;
    }
    Price.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Price entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Price entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Price", id.toString(), this);
        }
    };
    Price.load = function (id) {
        return changetype(graph_ts_1.store.get("Price", id));
    };
    Object.defineProperty(Price.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Price.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Price.prototype, "blockNumber", {
        get: function () {
            var value = this.get("blockNumber");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("blockNumber", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Price.prototype, "price", {
        get: function () {
            var value = this.get("price");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("price", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Price.prototype, "pair", {
        get: function () {
            var value = this.get("pair");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("pair");
            }
            else {
                this.set("pair", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return Price;
}(graph_ts_1.Entity));
exports.Price = Price;
var CoinIncrease = /** @class */ (function (_super) {
    __extends(CoinIncrease, _super);
    function CoinIncrease(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("synth", graph_ts_1.Value.fromString(""));
        _this.set("price", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("bPrice", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("increase", graph_ts_1.Value.fromBigDecimal(graph_ts_1.BigDecimal.zero()));
        _this.set("timestamp", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("high", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("low", graph_ts_1.Value.fromBigInt(graph_ts_1.BigInt.zero()));
        _this.set("marketVal", graph_ts_1.Value.fromBigDecimal(graph_ts_1.BigDecimal.zero()));
        return _this;
    }
    CoinIncrease.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save CoinIncrease entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save CoinIncrease entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("CoinIncrease", id.toString(), this);
        }
    };
    CoinIncrease.load = function (id) {
        return changetype(graph_ts_1.store.get("CoinIncrease", id));
    };
    Object.defineProperty(CoinIncrease.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CoinIncrease.prototype, "synth", {
        get: function () {
            var value = this.get("synth");
            return value.toString();
        },
        set: function (value) {
            this.set("synth", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CoinIncrease.prototype, "price", {
        get: function () {
            var value = this.get("price");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("price", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CoinIncrease.prototype, "bPrice", {
        get: function () {
            var value = this.get("bPrice");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("bPrice", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CoinIncrease.prototype, "increase", {
        get: function () {
            var value = this.get("increase");
            return value.toBigDecimal();
        },
        set: function (value) {
            this.set("increase", graph_ts_1.Value.fromBigDecimal(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CoinIncrease.prototype, "timestamp", {
        get: function () {
            var value = this.get("timestamp");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CoinIncrease.prototype, "high", {
        get: function () {
            var value = this.get("high");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("high", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CoinIncrease.prototype, "low", {
        get: function () {
            var value = this.get("low");
            return value.toBigInt();
        },
        set: function (value) {
            this.set("low", graph_ts_1.Value.fromBigInt(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CoinIncrease.prototype, "marketVal", {
        get: function () {
            var value = this.get("marketVal");
            return value.toBigDecimal();
        },
        set: function (value) {
            this.set("marketVal", graph_ts_1.Value.fromBigDecimal(value));
        },
        enumerable: false,
        configurable: true
    });
    return CoinIncrease;
}(graph_ts_1.Entity));
exports.CoinIncrease = CoinIncrease;
